function globalErrorHandler(t, e, r, i, n) { var s = i ? "\ncolumn: " + i + !n ? "" : "\nerror: " + n : ""; $("#dvMessage").text("javascript error: " + t + "\nurl: " + e + "\nline: " + r + s); return !0 } function setCookie(t, e, r) { var i = new Date; i.setTime(i.getTime() + 24 * r * 60 * 60 * 1e3); var n = "expires=" + i.toUTCString(); document.cookie = t + "=" + e + "; " + n } function getCookie(t) { for (var e = t + "=", r = document.cookie.split(";"), i = 0; i < r.length; i++) { for (var n = r[i]; " " == n.charAt(0) ;) n = n.substring(1); if (0 == n.indexOf(e)) return n.substring(e.length, n.length) } return "" } var app = angular.module("appBibleContents", ["ngRoute"]); app.run(["serviceApiCalls", "$rootScope", function (t, e) { e.bibleStructures = null, t.getBibleStructure(), e.typeOf = function (t) { return typeof t } }]), app.factory("$exceptionHandler", function () { return function (t, e) { $("#dvMessage").html("Angular error: " + decodeURI(t.message) + " :" + e + "<br/>" + t.fileName.substring(t.fileName.lastIndexOf("/")) + " :" + t.lineNumber) } }), app.service("serviceApiCalls", ["$http", "$rootScope", function (t, e) { var r = "http://churchhelper.azurewebsites.net/apiBible/"; this.getBibleStructure = function () { t.get(r + "GetBibleStructure").then(function (t) { var r = t.data; r.Status.Ok ? (e.bibleStructures = r.Data, e.bibleStructures.unshift(r.Data[0])) : $("#dvMessage").text("api Failure: " + r.Status.Id + " : " + r.Status.Info) }, this.failureHttpRequest) }, this.getVerseOfChapter = function (e, i, n, s) { t.get(r + "GetVersesOfChapter/" + e + "/" + i + "/" + n).then(function (t) { var e = t.data; e.Status.Ok ? s(e.Data) : $("#dvMessage").text("api Failure: " + e.Status.Id + " : " + e.Status.Info) }, this.failureHttpRequest) }, this.doSearch = function (e, i) { t.post(r + "DoSearch", e).then(function (t) { var e = t.data; e.Status.Ok ? i(e.Data, e.Pagination) : $("#dvMessage").text("api Failure: " + e.Status.Id + " : " + e.Status.Info) }, this.failureHttpRequest) }, this.failureHttpRequest = function (t) { $("#dvMessage").text("http Failure: " + t.status + " : " + t.statusText) } }]), app.controller("controllerBibleContents", ["serviceApiCalls", "serviceBibleSettings", "$rootScope", "$scope", function (t, e, r, i) { var n = this; this.bibleStructure = {}, this.books = [], this.chapters = [], this.verses = [], n.current = { bibleId: 0, book: { Id: "", Name: "", ChapterCount: 1 }, chapter: 1, verse: 1, fromVerse: 1, toVerse: 1 }, n.step = 1; var s = null; this.init = function () { e.registerSubscriber(n.updateSubscriber), s = i.$watch(function () { return r.bibleStructures }, function () { null != r.bibleStructures && (n.getBibleStructure(r.bibleStructures[0]), n.setVersesRange("start", 1), s()) }, !0) }, this.getBibleStructure = function (t) { n.bibleStructure = t, this.books = [], n.bibleStructure.Testments.forEach(function (t) { t.Groups.forEach(function (t) { t.Books.forEach(function (t) { t.boolSelected = !1, n.books.push(t) }) }) }), n.clickBook(n.books[0]) }, this.updateSubscriber = function () { var t = e.settings.bibleId, i = e.settings.versesPerPage; n.current.bibleId.Id != t && (n.current.bibleId = t, null != r.bibleStructures && null != r.bibleStructures[n.current.bibleId] && (n.getBibleStructure(r.bibleStructures[n.current.bibleId]), n.clickChapter(n.current.chapter, n.current.verse))), n.step != i && (n.step = parseInt(i), n.setVersesRange("start", n.current.verse)) }, this.currentTitle = function () { return n.current.fromVerse == n.current.toVerse ? n.current.book.Name + " " + n.current.chapter + " : " + n.current.verse : n.current.book.Name + " " + n.current.chapter + " : " + n.current.fromVerse + " - " + n.current.toVerse }, this.clickBook = function (t) { if (n.current.book.Id != t.Id) { n.current.book = t, n.current.chapter = 1, n.chapters = []; for (var e = 1; e <= t.ChapterCount; e++) n.chapters.push(e); n.clickChapter(n.chapters[0]) } }, this.clickChapter = function (e, r) { n.current.chapter = e, n.current.verse = null == r ? 1 : r, t.getVerseOfChapter(n.current.bibleId, n.current.book.Id, n.current.chapter, n.getVersesOfChapter) }, this.clickVerse = function (t) { n.current.verse = t.VerseNo, $('#menuTabs a[href= "#divDisplay"]').tab("show"), n.setVersesRange("start", n.current.verse) }, this.clickVersesPerPage = function () { n.setVersesRange("start", n.current.verse) }, this.setVersesRange = function (t, e) { var r = 1, i = n.verses.length, s = e ? parseInt(e) : r; "next" == t && (s = n.current.verse + n.step), "back" == t && (s = n.current.verse - n.step), s = r > s ? r : s, s = s > i ? i : s, n.current.verse = s, n.current.fromVerse = s, n.current.toVerse = s + n.step - 1, n.current.toVerse > i && (n.current.toVerse = i) }, this.displayVerses = function () { for (var t = [], e = n.current.fromVerse - 1; e <= n.current.toVerse - 1; e++) t.push(n.verses[e]); return t }, this.getVersesOfChapter = function (t) { n.verses = t, n.setVersesRange("start", n.current.verse) }, this.cloneObject = function (t) { var e = JSON.parse(JSON.stringify(t)); return e }, this.range = function (t, e, r) { for (var i = [], n = t; e >= n; n += r) i.push(n); return i }, this.init() }]), app.controller("controllerSearch", ["serviceApiCalls", "serviceBibleSettings", "$rootScope", "$scope", function (t, e, r, i) { var n = this; this.bibleStructure = {}, this.currentBibleId = 1, this.searchTerm = "", this.searchResult = [], this.searchOptions = [{ id: 1, name: "term", caption: "must exact match" }, { id: 2, name: "prefix", caption: "must start with" }, { id: 3, name: "wildcard", caption: "must contain" }, { id: 4, name: "fuzzy", caption: "should look like" }, { id: 5, name: "mustnot", caption: "must not contain" }], this.selectedSearchOption = this.searchOptions[0], this.pagination = {}; var s = null; this.init = function () { e.registerSubscriber(n.updateSubscriber), s = i.$watch(function () { return r.bibleStructures }, function () { null != r.bibleStructures && (n.bibleStructure = r.bibleStructures[0], s()) }, !0) }, this.updateSubscriber = function () { n.currentBibleId = parseInt(e.settings.bibleId), null != r.bibleStructures && null != r.bibleStructures[n.currentBibleId] && (n.bibleStructure = r.bibleStructures[n.currentBibleId]) }, this.clickBible = function () { n.bibleStructure.Selected = 1 == n.bibleStructure.Selected ? 0 : 1, n.bibleStructure.Testments.forEach(function (t) { n.clickTestment(t, n.bibleStructure.Selected) }) }, this.clickTestment = function (t, e) { t.Selected = null == e ? 1 == t.Selected ? 0 : 1 : e, t.Groups.forEach(function (e) { n.clickGroup(e, t.Selected) }) }, this.clickGroup = function (t, e) { t.Selected = null == e ? 1 == t.Selected ? 0 : 1 : e, t.Books.forEach(function (e) { e.Selected = t.Selected, e.boolSelected = 1 == t.Selected ? !0 : !1 }) }, this.clickBook = function (t) { t.Selected = t.boolSelected ? 1 : 0 }, this.showGroup = function (t) { var e = []; return null != n.bibleStructure.Testments && "undefined" != n.bibleStructure.Testments && n.bibleStructure.Testments.forEach(function (r) { r.Groups.forEach(function (r) { var i = !1; i = i || 1 == t && (1 == r.Id || 2 == r.Id || 3 == r.Id), i = i || 2 == t && (4 == r.Id || 5 == r.Id), i = i || 3 == t && (6 == r.Id || 7 == r.Id || 8 == r.Id), i = i || 4 == t && (9 == r.Id || 10 == r.Id), i && e.push(r) }) }), e }, this.getBookName = function (t) { var e = parseInt(t), r = ""; return n.bibleStructure.Testments.forEach(function (t) { t.Groups.forEach(function (t) { t.Books.forEach(function (t) { parseInt(t.Id) == e && (r = t.Name.trim()) }) }) }), r }, this.doSearch = function (e) { if ("." == e || ".." == e); else { var r = { pageIndex: e, bibleIds: [n.currentBibleId], bibleFilter: n.bibleStructure, searchCriteria: { searchItems: [{ searchTerm: n.searchTerm }] } }, i = angular.toJson(r); t.doSearch(i, n.successDoSearch) } }, this.successDoSearch = function (t, e) { n.searchResult = t, n.pagination = e }, this.getPagination = function () { for (var t = [], e = n.pagination.TotalPageCount > 20, r = !1, i = 1; i <= n.pagination.TotalPageCount; i++) e && i > 4 && i <= n.pagination.TotalPageCount - 4 ? r || (t.push(".."), r = !0) : t.push(i); return t }, this.init() }]), app.service("serviceStyleSettings", ["serviceBibleSettings", function (t) { var e = this; this.publish = [], this.settings = { backgroundColor: "aliceblue", backgroundImage: "none", fontColor: "black", fontSize: "18", align: "left", language: "english" }, this.getSettings = function () { return e.settings }, this.registerSubscriber = function (t) { e.publish.push(t) }, this.initSettings = function () { var r = getCookie("styleSettings"); null != r && "" != r && (e.settings = JSON.parse(r)), e.settings.align = t.settings.align, e.settings.language = t.settings.language, e.publish.forEach(function (t) { t() }) }, this.saveSettings = function () { setCookie("styleSettings", JSON.stringify(e.settings), 1e3) }, this.init = function () { t.registerSubscriber(e.updateSubscriber) }, this.updateSubscriber = function () { e.settings.align = t.settings.align, e.settings.language = t.settings.language, e.publish.forEach(function (t) { t() }) }, this.setFontSize = function (t) { e.settings.fontSize = t, e.publish.forEach(function (t) { t() }) }, this.setBackgroundColor = function (t) { e.settings.backgroundColor = t, e.publish.forEach(function (t) { t() }) }, this.setFontColor = function (t) { e.settings.fontColor = t, e.publish.forEach(function (t) { t() }) }, this.displayStyle = function () { var t = {}; return t["background-color"] = e.settings.backgroundColor, t.color = e.settings.fontColor, t["font-size"] = e.settings.fontSize + "px", t["text-align"] = e.settings.align, t.height = "100%", t }, this.init() }]), app.controller("controllerStyles", ["serviceStyleSettings", function (t) { var e = this; this.settings = {}, this.visibleContentLeft = !0, this.visibleContentRight = !1, this.init = function () { t.registerSubscriber(e.updateSubscriber), t.initSettings() }, this.updateSubscriber = function () { e.settings = t.getSettings(), e.visibleContentLeft = "left" == t.settings.align, e.visibleContentRight = "right" == t.settings.align }, this.clickSaveSettings = function () { t.saveSettings() }, this.setFontSize = function () { t.setFontSize(e.settings.fontSize) }, this.setBackgroundColor = function () { t.setBackgroundColor(e.settings.backgroundColor) }, this.setFontColor = function () { t.setFontColor(e.settings.fontColor) }, this.displayStyle = function () { return t.displayStyle() }, this.init() }]), app.service("serviceBibleSettings", ["$rootScope", function (t) { var e = this; this.publish = [], this.settings = { versesPerPage: 2, bibleId: 1, align: "right", language: "arabic" }, this.getSettings = function () { return e.settings }, this.registerSubscriber = function (t) { e.publish.push(t) }, this.initSettings = function () { var t = getCookie("bibleSettings"); null != t && "" != t && (e.settings = JSON.parse(t)), e.publish.forEach(function (t) { t() }) }, this.saveSettings = function () { setCookie("bibleSettings", JSON.stringify(e.settings), 1e3) }, this.setVersesPerPage = function (t) { e.settings.versesPerPage = t, e.publish.forEach(function (t) { t() }) }, this.setBibleId = function (r) { e.settings.bibleId = r; var i = parseInt(r); null != t.bibleStructures && null != t.bibleStructures[i] && (e.settings.align = t.bibleStructures[i].Alignment, e.settings.language = t.bibleStructures[i].Language), e.publish.forEach(function (t) { t() }) } }]), app.controller("controllerBibleSettings", ["serviceBibleSettings", "$scope", function (t, e) { var r = this; this.settings = {}, this.bibles = [{ id: 1, name: "Van-Dyke" }, { id: 2, name: "KJV" }], this.init = function () { t.registerSubscriber(r.updateSubscriber), t.initSettings() }, this.updateSubscriber = function () { r.settings = t.getSettings() }, this.clickSaveSettings = function () { t.saveSettings() }, this.setBibleId = function (e) { t.setBibleId(e) }, this.setVersesPerPage = function () { t.setVersesPerPage(r.settings.versesPerPage) }, this.init() }]), app.directive("stringToNumber", function () { return { require: "ngModel", link: function (t, e, r, i) { i.$parsers.push(function (t) { return "" + t }), i.$formatters.push(function (t) { return parseFloat(t, 10) }) } } });